div.container.mt-5
  header.text-center.mb-4
    h1.display-4 Detected Menu Items
    p.lead Select a dish to view ingredients and nutrition information
  
  - if text.empty?
    .alert.alert-warning.text-center
      i.fa-solid.fa-exclamation-triangle.mr-2
      | No text detected in the image.
  - else
    .card
      .card-header.bg-light
        h2.h4.mb-0
          i.fa-solid.fa-list.mr-2
          | Detected Items (#{text.line_count})
      .card-body
        form#dish-selection-form
          .detected-items
            - text.each_selectable_line do |item|
              .menu-item.mb-3.p-3.border.rounded.hover-bg-light
                .form-check.d-flex.justify-content-between.align-items-center
                  input.form-check-input[
                    type="radio"
                    id=item[:id]
                    name="dish_name"
                    value=item[:value]
                    required=true
                  ]
                  label.form-check-label.ml-2[
                    for=item[:id]
                  ] = item[:display_text]
          
          #progress-container.mt-4.d-none
            .text-center.mb-4
              h4.progress-message.text-muted Processing...
            .progress
              .progress-bar.progress-bar-striped.progress-bar-animated.bg-success[
                role="progressbar"
                style="width: 0%"
                aria-valuenow="0"
                aria-valuemin="0"
                aria-valuemax="100"
              ]
            .mt-3.text-center.progress-details
              small.text-muted Please wait...
          
          #error-container.alert.alert-danger.mt-4.d-none
            span.error-message
            button.close[type="button" data-dismiss="alert"]
              span aria-hidden="true" &times;

          .text-center.mt-4
            button#submit-button.btn.btn-primary.btn-lg[type="submit"]
              i.fa-solid.fa-search.mr-2
              | Get Dish Information

      .card-footer.text-center
        a.btn.btn-outline-secondary[href="/"]
          i.fa-solid.fa-arrow-left.mr-2
          | Back to Home

javascript:
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('dish-selection-form');
    const progressContainer = document.getElementById('progress-container');
    const errorContainer = document.getElementById('error-container');
    const submitButton = document.getElementById('submit-button');

    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      const formData = new FormData(form);
      const dishName = formData.get('dish_name');
      
      if (!dishName) {
        showError('Please select a dish');
        return;
      }

      submitButton.disabled = true;
      showProgress();
      
      try {
        const response = await fetch('/dishes', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            dish_name: dishName
          })
        });

        const result = await response.json();
        
        if (response.ok) {
          if (result.progress) {
            // Handle progress updates
            const client = new Faye.Client(result.progress.endpoint);
            client.subscribe(result.progress.channel, function(message) {
              const data = typeof message === 'string' ? JSON.parse(message) : message;
              updateProgress(data);
              
              if (data.percentage === 100) {
                window.location.href = `/display_dish?name=${encodeURIComponent(dishName)}`;
              }
            });
          } else {
            window.location.href = `/display_dish?name=${encodeURIComponent(dishName)}`;
          }
        } else {
          showError(result.message || 'Failed to process dish');
          submitButton.disabled = false;
        }
      } catch (error) {
        console.error('Error:', error);
        showError('An error occurred while processing your request');
        submitButton.disabled = false;
      }
    });

    function updateProgress(data) {
      const progressBar = progressContainer.querySelector('.progress-bar');
      const progressMessage = progressContainer.querySelector('.progress-message');
      
      progressBar.style.width = `${data.percentage}%`;
      progressBar.setAttribute('aria-valuenow', data.percentage);
      progressMessage.textContent = data.message || 'Processing...';
    }

    function showProgress() {
      progressContainer.classList.remove('d-none');
      errorContainer.classList.add('d-none');
    }

    function showError(message) {
      errorContainer.classList.remove('d-none');
      errorContainer.querySelector('.error-message').textContent = message;
      progressContainer.classList.add('d-none');
    }
  });