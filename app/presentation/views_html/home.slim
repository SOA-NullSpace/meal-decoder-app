div.container.mt-5
  header.mb-4
    .d-flex.justify-content-center
      h1.mb-0 Meal Decoder

  - if dishes.any?
    .d-flex.justify-content-end
      p.text-muted = "#{dishes.count} dishes decoded"

  section.search-section.mb-5
    .card
      .card-body
        h2.h4.mb-4 Decode Dish Name
        #form-container
          form#dish-form
            .form-group
              label.font-weight-bold for="dish_name" Enter the dish name:
              input#dish_name.form-control type="text" name="dish_name" placeholder="E.g., Spaghetti Carbonara" required="true"
              small.form-text.text-muted Only letters and spaces are allowed.
            button.btn.btn-primary.btn-block type="submit"
              i.fa-solid.fa-search.mr-2
              | Decode Ingredients

          #progress-container.mt-4.d-none
            .text-center.mb-4
              h4.progress-message.text-muted Starting dish processing...
            .progress
              .progress-bar.progress-bar-striped.progress-bar-animated.bg-success[
                role="progressbar"
                style="width: 0%"
                aria-valuenow="0"
                aria-valuemin="0"
                aria-valuemax="100"
              ] 0%
            .mt-3.text-center.progress-details
              small.text-muted Please wait while we analyze your dish...

          #error-container.alert.alert-danger.mt-4.d-none
            span.error-message
            button.close type="button" data-dismiss="alert" aria-label="Close"
              span aria-hidden="true" &times;

  section.image-upload-section.mb-5
    .card
      .card-body
        h2.h4.mb-4 Decode Menu Image
        form action="/detect_text" method="post" enctype="multipart/form-data"
          .form-group
            label.font-weight-bold.d-block for="image_file" Upload a menu image:
            .custom-file.mb-3
              input#image_file.custom-file-input type="file" name="image_file" accept="image/*" required="true"
              label.custom-file-label.text-muted.overflow-hidden for="image_file" data-browse="Browse"
                i.fa-solid.fa-upload.mr-2
                | Choose file...
            small.form-text.text-muted.mt-2 Supported formats: JPG, PNG, GIF
          button.btn.btn-secondary.btn-block type="submit"
            i.fa-solid.fa-camera.mr-2
            | Decode Menu Image

  - if dishes.any?
    section.history-section
      .card
        .card-header.bg-light
          h2.h4.mb-0 
            | Recently Decoded Dishes 
            span.text-muted = "(#{dishes.count})"
        .card-body
          ul.list-group.list-group-flush
            - dishes.each do |dish|
              li.list-group-item.d-flex.justify-content-between.align-items-center
                a.text-decoration-none href="/display_dish?name=#{CGI.escape(dish.name)}" 
                  = dish.name
                  span.ml-2.badge.badge-pill class="badge-#{dish.calorie_class}" = dish.calorie_level
                form.ml-2 method="post" action="/dish/#{CGI.escape(dish.name)}" style="display: inline"
                  input type="hidden" name="_method" value="delete"
                  button.btn.btn-sm.btn-outline-danger type="submit" title="Remove from history"
                    i.fa-solid.fa-trash.mr-1
                    | Remove

javascript:
  // Image file input handler
  document.getElementById('image_file')?.addEventListener('change', function(e) {
    const fileName = e.target.files[0] ? e.target.files[0].name : 'Choose file...';
    const label = e.target.nextElementSibling;
    label.innerHTML = '<i class="fas fa-upload mr-2"></i>' + fileName;
  });

  // Progress tracking and form handling
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('dish-form');
    const formContainer = document.getElementById('form-container');
    const progressContainer = document.getElementById('progress-container');
    const errorContainer = document.getElementById('error-container');
    const errorMessage = errorContainer.querySelector('.error-message');
    const progressMessage = progressContainer.querySelector('.progress-message');
    const progressBar = progressContainer.querySelector('.progress-bar');
    const progressDetails = progressContainer.querySelector('.progress-details');

    let fayeClient = null;
    let fayeSubscription = null;

    if (form) {
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        try {
          const dishName = form.dish_name.value.trim();
          
          if (!dishName) {
            throw new Error('Please enter a dish name');
          }
          
          // Show loading state
          form.classList.add('d-none');
          progressContainer.classList.remove('d-none');
          errorContainer.classList.add('d-none');
          
          // Reset progress UI
          progressMessage.textContent = 'Starting dish processing...';
          progressBar.style.width = '0%';
          progressBar.textContent = '0%';
          progressDetails.innerHTML = '<small class="text-muted">Connecting to server...</small>';
          
          // Send request to server
          const response = await fetch('/dishes', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ dish_name: dishName })
          });

          if (!response.ok) {
            throw new Error(`Server error: ${response.status}`);
          }

          const result = await response.json();
          
          if (result.error) {
            throw new Error(result.error);
          }

          // Initialize progress tracking if we got channel info
          if (result.progress?.channel && result.progress?.endpoint) {
            progressDetails.innerHTML = '<small class="text-muted">Connected. Waiting for updates...</small>';
            
            // Clean up any existing Faye client
            if (fayeSubscription) {
              fayeSubscription.cancel();
            }
            if (fayeClient) {
              fayeClient.disconnect();
            }

            // Create new Faye client
            fayeClient = new Faye.Client(result.progress.endpoint, {
              timeout: 120,
              retry: 5
            });

            // Subscribe to progress channel
            fayeSubscription = fayeClient.subscribe(result.progress.channel, function(message) {
              try {
                const progressData = typeof message === 'string' ? JSON.parse(message) : message;
                
                if (progressData.error) {
                  throw new Error(progressData.error);
                }

                // Update progress UI
                const percent = parseInt(progressData.percentage || 0, 10);
                progressBar.style.width = `${percent}%`;
                progressBar.textContent = `${percent}%`;
                progressMessage.textContent = progressData.message || 'Processing...';
                
                if (progressData.details) {
                  progressDetails.innerHTML = `<small class="text-muted">${progressData.details}</small>`;
                }

                // Handle completion
                if (percent === 100) {
                  progressDetails.innerHTML = '<small class="text-success">Processing complete!</small>';
                  setTimeout(() => {
                    window.location.href = `/display_dish?name=${encodeURIComponent(dishName)}`;
                  }, 500);
                }
              } catch (err) {
                console.error('Progress update error:', err);
                showError('Failed to process progress update');
                cleanupFaye();
              }
            });

            // Handle connection status
            fayeClient.on('transport:up', function() {
              progressDetails.innerHTML = '<small class="text-success">Connected to processing server</small>';
            });

            fayeClient.on('transport:down', function() {
              progressDetails.innerHTML = '<small class="text-warning">Reconnecting to server...</small>';
            });
          } else {
            throw new Error('Server did not provide progress tracking information');
          }
        } catch (error) {
          console.error('Error:', error);
          showError(error.message);
          cleanupFaye();
        }
      });
    }

    function showError(message) {
      errorMessage.textContent = message;
      errorContainer.classList.remove('d-none');
      form.classList.remove('d-none');
      progressContainer.classList.add('d-none');
    }

    function cleanupFaye() {
      if (fayeSubscription) {
        fayeSubscription.cancel();
        fayeSubscription = null;
      }
      if (fayeClient) {
        fayeClient.disconnect();
        fayeClient = null;
      }
    }
  });
  
